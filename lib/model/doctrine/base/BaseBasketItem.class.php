<?php

/**
 * BaseBasketItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $basket_id
 * @property integer $session_id
 * @property integer $user_id
 * @property integer $quantity
 * @property integer $product_id
 * @property float $unit_price
 * @property float $total_price
 * @property string $sale_log
 * @property Basket $Basket
 * @property ShopProduct $ShopProduct
 * 
 * @method integer     getBasketId()    Returns the current record's "basket_id" value
 * @method integer     getSessionId()   Returns the current record's "session_id" value
 * @method integer     getUserId()      Returns the current record's "user_id" value
 * @method integer     getQuantity()    Returns the current record's "quantity" value
 * @method integer     getProductId()   Returns the current record's "product_id" value
 * @method float       getUnitPrice()   Returns the current record's "unit_price" value
 * @method float       getTotalPrice()  Returns the current record's "total_price" value
 * @method string      getSaleLog()     Returns the current record's "sale_log" value
 * @method Basket      getBasket()      Returns the current record's "Basket" value
 * @method ShopProduct getShopProduct() Returns the current record's "ShopProduct" value
 * @method BasketItem  setBasketId()    Sets the current record's "basket_id" value
 * @method BasketItem  setSessionId()   Sets the current record's "session_id" value
 * @method BasketItem  setUserId()      Sets the current record's "user_id" value
 * @method BasketItem  setQuantity()    Sets the current record's "quantity" value
 * @method BasketItem  setProductId()   Sets the current record's "product_id" value
 * @method BasketItem  setUnitPrice()   Sets the current record's "unit_price" value
 * @method BasketItem  setTotalPrice()  Sets the current record's "total_price" value
 * @method BasketItem  setSaleLog()     Sets the current record's "sale_log" value
 * @method BasketItem  setBasket()      Sets the current record's "Basket" value
 * @method BasketItem  setShopProduct() Sets the current record's "ShopProduct" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBasketItem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('basket_item');
        $this->hasColumn('basket_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('session_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('quantity', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('product_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('unit_price', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('total_price', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('sale_log', 'string', 125, array(
             'type' => 'string',
             'length' => 125,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Basket', array(
             'local' => 'basket_id',
             'foreign' => 'id',
             'onDelete' => 'cascade'));

        $this->hasOne('ShopProduct', array(
             'local' => 'product_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}