<?php

/**
 * BaseCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property integer $section_id
 * @property boolean $published
 * @property string $access
 * @property integer $order_id
 * @property integer $created_by
 * @property integer $updated_by
 * @property Section $Section
 * @property Doctrine_Collection $Contents
 * @property Doctrine_Collection $Galleries
 * @property Doctrine_Collection $Page
 * @property CategoryContent $CategoryContents
 * @property Doctrine_Collection $Vidoes
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method string              getName()             Returns the current record's "name" value
 * @method string              getDescription()      Returns the current record's "description" value
 * @method integer             getSectionId()        Returns the current record's "section_id" value
 * @method boolean             getPublished()        Returns the current record's "published" value
 * @method string              getAccess()           Returns the current record's "access" value
 * @method integer             getOrderId()          Returns the current record's "order_id" value
 * @method integer             getCreatedBy()        Returns the current record's "created_by" value
 * @method integer             getUpdatedBy()        Returns the current record's "updated_by" value
 * @method Section             getSection()          Returns the current record's "Section" value
 * @method Doctrine_Collection getContents()         Returns the current record's "Contents" collection
 * @method Doctrine_Collection getGalleries()        Returns the current record's "Galleries" collection
 * @method Doctrine_Collection getPage()             Returns the current record's "Page" collection
 * @method CategoryContent     getCategoryContents() Returns the current record's "CategoryContents" value
 * @method Doctrine_Collection getVidoes()           Returns the current record's "Vidoes" collection
 * @method Category            setId()               Sets the current record's "id" value
 * @method Category            setName()             Sets the current record's "name" value
 * @method Category            setDescription()      Sets the current record's "description" value
 * @method Category            setSectionId()        Sets the current record's "section_id" value
 * @method Category            setPublished()        Sets the current record's "published" value
 * @method Category            setAccess()           Sets the current record's "access" value
 * @method Category            setOrderId()          Sets the current record's "order_id" value
 * @method Category            setCreatedBy()        Sets the current record's "created_by" value
 * @method Category            setUpdatedBy()        Sets the current record's "updated_by" value
 * @method Category            setSection()          Sets the current record's "Section" value
 * @method Category            setContents()         Sets the current record's "Contents" collection
 * @method Category            setGalleries()        Sets the current record's "Galleries" collection
 * @method Category            setPage()             Sets the current record's "Page" collection
 * @method Category            setCategoryContents() Sets the current record's "CategoryContents" value
 * @method Category            setVidoes()           Sets the current record's "Vidoes" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('category');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 100,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '',
             ));
        $this->hasColumn('section_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('published', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => '1',
             ));
        $this->hasColumn('access', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('order_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('created_by', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('updated_by', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Section', array(
             'local' => 'section_id',
             'foreign' => 'id'));

        $this->hasMany('Content as Contents', array(
             'refClass' => 'CategoryContent',
             'local' => 'category_id',
             'foreign' => 'content_id'));

        $this->hasMany('Gallery as Galleries', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasMany('Page', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasOne('CategoryContent as CategoryContents', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasMany('Video as Vidoes', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'name',
              1 => 'description',
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($i18n0);
        $this->actAs($timestampable0);
    }
}