<?php

/**
 * BasesfGuardLoginHistory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property string $ip_address
 * @property string $access_type
 * @property sfGuardUser $sfGuardUser
 * 
 * @method integer             getUserId()      Returns the current record's "user_id" value
 * @method string              getIpAddress()   Returns the current record's "ip_address" value
 * @method string              getAccessType()  Returns the current record's "access_type" value
 * @method sfGuardUser         getSfGuardUser() Returns the current record's "sfGuardUser" value
 * @method sfGuardLoginHistory setUserId()      Sets the current record's "user_id" value
 * @method sfGuardLoginHistory setIpAddress()   Sets the current record's "ip_address" value
 * @method sfGuardLoginHistory setAccessType()  Sets the current record's "access_type" value
 * @method sfGuardLoginHistory setSfGuardUser() Sets the current record's "sfGuardUser" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasesfGuardLoginHistory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sf_guard_login_history');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('ip_address', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('access_type', 'string', 50, array(
             'type' => 'string',
             'default' => 'Browser',
             'length' => 50,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}